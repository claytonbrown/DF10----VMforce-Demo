// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.medisend.mediaid.web;

import java.io.UnsupportedEncodingException;
import java.lang.String;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.medisend.mediaid.domain.Shipment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ShipmentController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ShipmentController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String ShipmentController.create(@Valid Shipment shipment, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("shipment", shipment);
            addDateTimeFormatPatterns(model);
            return "shipments/create";
        }
        shipment.persist();
        return "redirect:/shipments/" + encodeUrlPathSegment(shipment.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ShipmentController.createForm(Model model) {
        model.addAttribute("shipment", new Shipment());
        addDateTimeFormatPatterns(model);
        return "shipments/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ShipmentController.show(@PathVariable("id") String id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("shipment", Shipment.findShipment(id));
        model.addAttribute("itemId", id);
        return "shipments/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ShipmentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("shipments", Shipment.findShipmentEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Shipment.countShipments() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("shipments", Shipment.findAllShipments());
        }
        addDateTimeFormatPatterns(model);
        return "shipments/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ShipmentController.update(@Valid Shipment shipment, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("shipment", shipment);
            addDateTimeFormatPatterns(model);
            return "shipments/update";
        }
        shipment.merge();
        return "redirect:/shipments/" + encodeUrlPathSegment(shipment.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ShipmentController.updateForm(@PathVariable("id") String id, Model model) {
        model.addAttribute("shipment", Shipment.findShipment(id));
        addDateTimeFormatPatterns(model);
        return "shipments/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ShipmentController.delete(@PathVariable("id") String id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Shipment.findShipment(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/shipments?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    Converter<Shipment, String> ShipmentController.getShipmentConverter() {
        return new Converter<Shipment, String>() {
            public String convert(Shipment shipment) {
                return new StringBuilder().append(shipment.getName()).append(" ").append(shipment.getCountry()).append(" ").append(shipment.getType()).toString();
            }
        };
    }
    
    @PostConstruct
    void ShipmentController.registerConverters() {
        conversionService.addConverter(getShipmentConverter());
    }
    
    void ShipmentController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("shipment_shipdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String ShipmentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
